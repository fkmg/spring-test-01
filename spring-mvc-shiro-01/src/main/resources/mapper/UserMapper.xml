<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sxt.mapper.UserMapper" >
  <!--<cache/>-->
  <cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
  <resultMap id="BaseResultMap" type="com.sxt.bean.User" >
    <id column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="account_type_code" property="accountTypeCode" jdbcType="VARCHAR" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="salt" property="salt" jdbcType="VARCHAR" />
  </resultMap>

  <!--用户信息-->
  <resultMap id="ResultUserMap" type="com.sxt.bean.User" >
    <id column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="account_type_code" property="accountTypeCode" jdbcType="VARCHAR" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="salt" property="salt" jdbcType="VARCHAR" />
    <!--角色-->
    <collection property="roles" ofType="com.sxt.bean.Role">
      <id column="role_id" property="roleId" jdbcType="BIGINT" />
      <result column="role_name" property="roleName" jdbcType="VARCHAR" />
      <result column="role_desc" property="roleDesc" jdbcType="VARCHAR" />
      <!--资源 -->
      <collection property="resourceList" ofType="com.sxt.bean.Resource">
        <id column="resource_id" property="resourceId" jdbcType="BIGINT" />
        <result column="resource_name" property="resourceName" jdbcType="VARCHAR" />
        <result column="resource_type_code" property="resourceTypeCode" jdbcType="VARCHAR" />
        <result column="resource_url" property="resourceUrl" jdbcType="VARCHAR" />
        <result column="parent_id" property="parentId" jdbcType="BIGINT" />
        <result column="parent_ids" property="parentIds" jdbcType="VARCHAR" />
        <result column="resource_permission" property="resourcePermission" jdbcType="VARCHAR" />
      </collection>
    </collection>
  </resultMap>

  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    user_id, account, account_type_code, username, password, salt
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.sxt.bean.UserExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sys_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from sys_user
    where user_id = #{userId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from sys_user
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.sxt.bean.UserExample" >
    delete from sys_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sxt.bean.User" >
    insert into sys_user (user_id, account, account_type_code, 
      username, password, salt
      )
    values (#{userId,jdbcType=BIGINT}, #{account,jdbcType=VARCHAR}, #{accountTypeCode,jdbcType=VARCHAR}, 
      #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.sxt.bean.User" >
    insert into sys_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="accountTypeCode != null" >
        account_type_code,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="salt != null" >
        salt,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="accountTypeCode != null" >
        #{accountTypeCode,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null" >
        #{salt,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sxt.bean.UserExample" resultType="java.lang.Integer" >
    select count(*) from sys_user
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update sys_user
    <set >
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.account != null" >
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.accountTypeCode != null" >
        account_type_code = #{record.accountTypeCode,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null" >
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.salt != null" >
        salt = #{record.salt,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update sys_user
    set user_id = #{record.userId,jdbcType=BIGINT},
      account = #{record.account,jdbcType=VARCHAR},
      account_type_code = #{record.accountTypeCode,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      salt = #{record.salt,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sxt.bean.User" >
    update sys_user
    <set >
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="accountTypeCode != null" >
        account_type_code = #{accountTypeCode,jdbcType=VARCHAR},
      </if>
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null" >
        salt = #{salt,jdbcType=VARCHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sxt.bean.User" >
    update sys_user
    set account = #{account,jdbcType=VARCHAR},
      account_type_code = #{accountTypeCode,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      salt = #{salt,jdbcType=VARCHAR}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>


  <select id="getUserByAccount" parameterType="java.lang.String" resultMap="ResultUserMap" flushCache="false">
    SELECT
      su.*,
      sr.*,
      sre.*
    FROM
      sys_user su
      LEFT JOIN sys_user_role sur
        ON su.`user_id` = sur.`user_id`
      LEFT JOIN sys_role sr
        ON sur.`role_id` = sr.`role_id`
      LEFT JOIN sys_role_resource srr
        ON sur.`role_id` = srr.`role_id`
      LEFT JOIN sys_resource sre
        ON srr.`resource_id` = sre.`resource_id`
    WHERE su.`account` = #{value}
  </select>


  <select id="getUserPermissionsByAccount" parameterType="java.lang.String" resultType="java.lang.String">
    SELECT
      sr.`resource_permission`
    FROM
      sys_resource sr
      LEFT JOIN sys_role_resource srr
        ON sr.`resource_id` = srr.`resource_id`
      LEFT JOIN sys_user_role sur
        ON srr.`role_id` = sur.`role_id`
      LEFT JOIN sys_user su
        ON sur.`user_id` = su.`user_id`
    WHERE su.`account` = #{value}
  </select>

  <select id="getUserRolesByAccount" parameterType="string" resultType="string">
    SELECT
      sr.`role_name`
    FROM
      sys_role sr
      LEFT JOIN sys_user_role sur
        ON sr.role_id = sur.`role_id`
      LEFT JOIN sys_user su
        ON sur.`user_id` = su.`user_id`
    WHERE su.`account` = #{value}
  </select>
</mapper>